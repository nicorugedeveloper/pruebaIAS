PRUEBA IAS


Preguntas y Actividades:


1. Tipos de Datos y Operadores

1.1 ->numera al menos cinco tipos de datos comunes en SQL y proporciona un ejemplo de cada uno.
	r:  INT (edad INT)   -   VARCHAR (nombre VARCHAR(50)) - DATE (fecha_nacimiento DATE) - BOOLEAN (activo BOOLEAN) - FLOAT (precio FLOAT)
	
1.2	-> Explica la diferencia entre el operador LIKE y el operador IN : LIKE normalmente es utlizado para la busqueda de patrones dentro de unas cadenas de texto, mientras que IN lo utilizo.
	para especificar patrones de multiples valores
	

2. Comandos Básicos

2.1 Crea una tabla llamada "Canciones" con al menos cinco columnas: ID (clave primaria), Título, Artista,Reproducciones, Valoracion y Duración.
     
	 CREATE TABLE Canciones (
		ID INT PRIMARY KEY,
		Titulo VARCHAR(255),
		Artista VARCHAR(255),
		Reproducciones INT,
		Valoracion FLOAT, 
		Duracion TIME
	 
	 );
	

2.2 Inserta al menos 15 registros en la tabla "Canciones".
	
	INSERT INTO Canciones VALUES (1, 'Cancion 1', 'Artista 1', 10000, 4.5, '00:04:16'), 
								(2, 'Cancion 2', 'Artista 2', 20000, 6.5, '00:04:16'),
								(3, 'Cancion 3', 'Artista 3', 30000, 8.5, '00:04:16'),
								(4, 'Cancion 4', 'Artista 4', 40000, 4.5, '00:04:16'),
							    (5, 'Cancion 5', 'Artista 5', 10000, 4.5, '00:04:16'),
								(6, 'Cancion 6', 'Artista 6', 10000, 4.5, '00:04:16'),
								(7, 'Cancion 7', 'Artista 7', 10000, 4.5, '00:04:16'),
								(8, 'Cancion 8', 'Artista 8', 10000, 4.5, '00:04:16'),
								(9, 'Cancion 9', 'Artista 9', 10000, 4.5, '00:04:16'),
								(10, 'Cancion 10', 'Artista 10', 10000, 4.5, '00:04:16'),
								(11, 'Cancion 11', 'Artista 11', 10000, 4.5, '00:04:16'),
								(12, 'Cancion 12', 'Artista 12', 10000, 4.5, '00:04:16'),
								(13, 'Cancion 13', 'Artista 13', 10000, 4.5, '00:04:16'),
								(14, 'Cancion 14', 'Artista 14', 10000, 4.5, '00:04:16'),
								(14, 'Cancion 15', 'Artista 15', 10000, 4.5, '00:04:16');
								


2.3 Utiliza un comando para eliminar todos los registros de la tabla "Canciones".
         
		  DELETE FROM Canciones;
		  
		  

3. Consultas Básicas y Agregadas


3.1 Escribe una consulta para seleccionar todas las canciones que tienen una duración superior a 5 minutos.
         SELECT * FROM Canciones WHERE duracion > 300 ;


3.2 Escribe una consulta para calcular la duración total de todas las canciones.
        SELECT SUM(duracion) AS Dtotal FROM Canciones;

3.3 Escribe una consulta para contar el número total de canciones en la tabla.

		SELECT COUNT(*) AS TCanciones FROM Canciones;


4 Restricciones de Datos

4.1 Agrega una restricción de clave primaria a la columna "ID" en la tabla "Canciones".
		
			ALTER TABLE Canciones ADD PRIMARY KEY (ID)

4.2 Agrega una restricción de clave externa a la tabla "Canciones" que haga referencia a otra tabla llamada
"Artistas".

			ALTER TABLE Canciones ADD CONSTRAINT fk_artista FOREIGN KEY (art_id) REFERENCES(ID);
			

5. Subconsultas

5.1  Utiliza una subconsulta para encontrar la canción más larga en la tabla.
			
			SELECT * FROM  Canciones WHERE duracion = (SELECT MAX(duracion) FROM Canciones)
			

5.2 Utiliza una subconsulta para encontrar las canciones de un artista específico.

		SELECT * FROM  Canciones WHERE art_id = (SELECT art_id FROM Artista  WHERE nombre = 'NicoRuge');

6. Joins Avanzados

6.1 Realiza una consulta que muestre el título de la canción y el nombre del artista para todos los registros en la
tabla "Canciones"

			SELECT Canciones.titulo, Artista.nombre FROM Canciones INNER JOIN Artista ON Canciones.ID = Artista.art_id 
			

7. Transactions


7.1 Explica brevemente los principios de ACID. -> Solo recuerdo Atomocidad y Consistente  :Preguntas


7.2 Utiliza comandos BEGIN y COMMIT para encapsular una serie de instrucciones SQL en una transacción.

	BEGIN;
	   SELECT * FROM Canciones
	COMMIT;
	
8. Funciones Aritméticas y Vistas

8.1 Escribe una consulta que utilice funciones aritméticas para calcular la duración promedio de las canciones.
		SELECT AVG(duracion) AS duracion_promedio FROM Canciones;


8.2 Crea una vista que muestre los títulos y las duraciones de las canciones.
	    
		CREATE VIEW VTDuraciones AS SELECT titulo, duracion FROM Canciones
		
		
9. Funciones Avanzadas y Stored Procedures

9.1 Escribe una consulta que utilice un cursor para mostrar "Larga" si la duración es mayor que 7 minutos y "Corta"
en caso contrario.



9.2 Crea un procedimiento almacenado que calcule cual es la cancion mas reproducida de un artist

			CREATE PROCEDURE canMasSonada AS
			BEGIN 
				SELECT titulo, MAX(Reproducciones) FROM canciones GROUP BY titulo; 
			END;
			

10. Triggers y Optimización de Consultas

10.1  Crea un trigger que se active antes de la inserción en la tabla "Canciones" y asegure que la duración no sea
inferior a 1 minuto.

		CREATE TRIGGER DuMini BEFORE
			INSERT ON Canciones
		FOR EACH ROW
		BEGIN
			IF NEW.duracion < '00:01:00' THEN 
				SIGNAL SQLSTATE '45000' SET
				MESSAGE_TEXT = 'Duracion deberia ser por lo menos un minuto'
			END IF;
		END;


10.2 Proporciona una consulta que optimice el rendimiento al reducir el número de subconsultas utilizadas.

		SELECT c.titulo, a.nombre FROM Canciones c 
		JOIN artista a ON c.artista_id = a.artista_id;
		

11. Conceptos Avanzados de SQL
Escribe una consulta recursiva para mostrar una jerarquía de canciones por reproducciones.